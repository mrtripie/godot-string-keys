INSTRUCTIONS:
1: Download newest release for your engine version (if you're using Godot 3.2, choose the newset version of 3.2.X)

2: If your project doesn't have an addons folder (res://addons/), create one

3: Copy the string_keys folder and paste it under your project's addons folder

4: Go to the top left of Godot > Project > Project Settings > Plugins tab (might be renamed Addons for consistency later) > find the String Keys addon, and set the Status to Active

5: There should now be a StringKeys dock in the top right. Under it set the name and path of the Translation File you want it to generate (such as res://localization/translations.csv)

6: Add strings that you want to translate in your project, Dialogue and/or UI. The string should be in the format: {optional catagory or note}{prefix}{text}, the prefix is a part of the string that tells StringKeys that this string should be used as a translation key, it should be something that you don't expect will be part of any other keys, the default setting is "$$". An example key would be on a button in your UI with the text: "$$New Game" which will be added as a key and assuming Text From Key is turned on, will generate the translation for your native locale of "New Game". You can also add an optional catagory/note before the prefix which will be ignored by Text From Key, but will group together all keys with that category (keys are put in alphabetical order). For example "UI$$New Game" will also generate the translation "New Game" but it will be grouped with all other keys starting with "UI" and let the translater know the context of string.
Note: StringKeys supports any text based format that saves strings between "quotation marks", such as text programming files like .gd and .cs, as well as godot specific text files like .tscn and .tres. It also supports certain Godot binary files (.scn, .res and .vs (visual script)) by creating a temporary text based copy of them (making them a little slower to get keys from)

7: Go to StringKeys dock and click Create Translation File button. NOTE: Its recommended that only one team member generates the translation file as to avoid merge conflicts in version control such as git (and when it trys to automatically solve the conflict, I'm not sure if it will do it correctly"

8: After your csv translation file is generated, Godot will create translation files for each locale in the same folder as your csv file in the format {csv file name}.{locale}.translation (ex: translations.en.translation), go back to project > project settings, then go to the Localization tab, click add and find the .locale.translation files Godot generated and add them. The translations should work now!

9: Hover over the names of the other options for tooltips describing what they do to set it up the way you want, perhaps using Modified Only and maybe Auto on Save normally, and ocassionaly disabling Modified Only and using Remove Unused to clean up the csv file.

10: You can open up and edit the csv file in Libre Office Calc (other spreadsheets work too). When the import dialogue shows up, change the Character Set to "Unicode (UTF-8)" and have the only separator option enabled be "Comma", click OK, edit and save! If you mispelled your keys, the auto generated first translation will be mispelled, you can use spell check here to fix the translation (column 2) BUT DON'T FIX THE KEY in Libre Office as Godot will look for the old mispelled one and not find it. You can also tweak dialouge here quickly (again, only the translation). It's not reccommended to manually add keys as StringKeys expects the csv file to be in althabetical order.

11: You can test other locales in Godot by going to Project > Project Settings > General tab > Locale side tab (near the bottom), and type the locale you want to test in "Test" option, and erase it when done testing.


KEY FORMATTING IN CODE: 
"$$This is a simple example"
"Cat$$This example has a category"
"$$This is a \"quote\""
"$$\\back\\slashes\\"


LIKELY POTENTIAL ISSUES
Probably shouldn't merge 2 members versions in version control
Back slash \ might be able to confuse what parts of a file are strings (I think this is fixed)
Certian situations may cause a problem when using an old .csv file as an input


KNOWN ISSUES:
2 backslashes \\ in a row in a translation will be read by godot as 1, even though the generated file appears to be correct


POSSIBLE TODOS: (Low priorty right now)
See if you can make it ensure there are no duplicate keys, even when not in alphabetical order (without complicating things)
Presets so you can have multiple files scanning different key types (wont work with modified files w/o a redesign though)
See if you can find a way to deal with modified files when different settings come in to play (such as presets)